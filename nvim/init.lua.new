-- Terminal toggling functionality
-- Globals declared and used
MiniDeps = nil
MiniStatusline = nil
MiniNotify = nil
MiniTrailspace = nil

-- Autoload mini.nvim
local path_package = vim.fn.stdpath("data") .. "/site"
local mini_path = path_package .. "/pack/deps/start/mini.nvim"
if not vim.loop.fs_stat(mini_path) then
	vim.cmd('echo "Installing `mini.nvim`" | redraw')
	local clone_cmd = {
		"git",
		"clone",
		"--filter=blob:none",
		"https://github.com/echasnovski/mini.nvim",
		mini_path,
	}
	vim.fn.system(clone_cmd)
	vim.cmd("packadd mini.nvim | helptags ALL")
end
require("mini.deps").setup({ path = { package = path_package } })

-- Rename add and now functions from mini.deps
local add, now = MiniDeps.add, MiniDeps.now

-- Default settings
now(function()
	vim.g.loaded_netrw = 1
	vim.g.loaded_netrwPlugin = 1
	vim.g.mapleader = " "
	vim.o.conceallevel = 2
	vim.o.fillchars = [[eob: ,fold: ,foldopen:,foldsep: ,foldclose:]]
	vim.o.foldcolumn = "1"
	vim.o.foldenable = true
	vim.o.foldlevel = 99
	vim.o.foldlevelstart = 99
	vim.o.ignorecase = true
	vim.o.listchars = "eol:¬,tab:|-,trail:~,extends:>,precedes:<"
	vim.o.mousescroll = "ver:5,hor:5"
	vim.o.showcmd = true
	vim.o.showmatch = true
	vim.o.showmode = false
	vim.o.smartcase = true
	vim.o.termguicolors = true
	vim.o.textwidth = 0
	vim.o.updatetime = 500
	vim.o.wildmode = "longest:full,full"
	vim.o.wrap = false
	vim.opt.cursorcolumn = false
	vim.opt.cursorline = true
	vim.opt.expandtab = true
	vim.opt.hlsearch = true
	vim.opt.incsearch = true
	vim.opt.list = true
	vim.opt.matchpairs:append("<:>")
	vim.opt.maxmempattern = 20000
	vim.opt.number = true
	vim.opt.shiftwidth = 2
	vim.opt.signcolumn = "yes:1"
	vim.opt.tabstop = 2
	vim.opt.undofile = false
	vim.opt.wildmenu = true
	vim.cmd("cd " .. vim.fn.system("git rev-parse --show-toplevel 2> /dev/null"))
	vim.fn.sign_define("DapBreakpoint", { text = "󰙧", texthl = "DiagnosticSignError", linehl = "", numhl = "" })
	vim.fn.sign_define(
		"DapBreakpointCondition",
		{ text = "●", texthl = "DiagnosticSignWarn", linehl = "", numhl = "" }
	)
	vim.fn.sign_define("DapStopped", { text = "", texthl = "DiagnosticSignHint", linehl = "", numhl = "" })
	vim.fn.sign_define("DapLogPoint", { text = "◆", texthl = "DiagnosticSignInfo", linehl = "", numhl = "" })
	vim.fn.sign_define("DiagnosticSignError", { text = "", texthl = "", linehl = "", numhl = "DiagnosticSignError" })
	vim.fn.sign_define("DiagnosticSignWarn", { text = "", texthl = "", linehl = "", numhl = "DiagnosticSignWarn" })
	vim.fn.sign_define("DiagnosticSignInfo", { text = "", texthl = "", linehl = "", numhl = "DiagnosticSignInfo" })
	vim.fn.sign_define("DiagnosticSignHint", { text = "", texthl = "", linehl = "", numhl = "DiagnosticSignHint" })
end)

-- Mini plugins initialisation
now(function()
	require("mini.ai").setup()
	require("mini.align").setup()
	require("mini.animate").setup({ scroll = { enable = false } })
	require("mini.base16").setup({
		-- solarized dark color palette
		palette = {
			base00 = "#002B36",
			base01 = "#073642",
			base02 = "#586E75",
			base03 = "#657B83",
			base04 = "#839496",
			base05 = "#93A1A1",
			base06 = "#EEE8D5",
			base07 = "#FDF6E3",
			base08 = "#DC322F",
			base09 = "#CB4B16",
			base0A = "#B58900",
			base0B = "#859900",
			base0C = "#2AA198",
			base0D = "#268BD2",
			base0E = "#6C71C4",
			base0F = "#D33682",
		},
		-- one dark color palette
		-- palette = {
		--      base00 = "#282C34",
		--      base01 = "#353B45",
		--      base02 = "#3E4451",
		--      base03 = "#545862",
		--      base04 = "#565C64",
		--      base05 = "#ABB2BF",
		--      base06 = "#B6BDCA",
		--      base07 = "#C8CCD4",
		--      base08 = "#E06C75",
		--      base09 = "#D19A66",
		--      base0A = "#E5C07B",
		--      base0B = "#98C379",
		--      base0C = "#56B6C2",
		--      base0D = "#61AFEF",
		--      base0E = "#C678DD",
		--      base0F = "#BE5046",
		-- },
		-- nord dark color palette
		-- palette = {
		--      base00 = "#2E3440",
		--      base01 = "#3B4252",
		--      base02 = "#434C5E",
		--      base03 = "#4C566A",
		--      base04 = "#D8DEE9",
		--      base05 = "#E5E9F0",
		--      base06 = "#ECEFF4",
		--      base07 = "#8FBCBB",
		--      base08 = "#88C0D0",
		--      base09 = "#81A1C1",
		--      base0A = "#5E81AC",
		--      base0B = "#BF616A",
		--      base0C = "#D08770",
		--      base0D = "#EBCB8B",
		--      base0E = "#A3BE8C",
		--      base0F = "#B48EAD",
		-- },
		plugins = { default = true },
	})
	require("mini.basics").setup({
		mappings = {
			windows = true,
		},
	})
	require("mini.bracketed").setup()
	-- require("mini.bufremove").setup()
	require("mini.clue").setup({
		triggers = {
			{ mode = "n", keys = "<Leader>" },
			{ mode = "x", keys = "<Leader>" },
			{ mode = "n", keys = [[\]] },
			{ mode = "n", keys = "[" },
			{ mode = "n", keys = "]" },
			{ mode = "x", keys = "[" },
			{ mode = "x", keys = "]" },
			{ mode = "i", keys = "<C-x>" },
			{ mode = "n", keys = "g" },
			{ mode = "x", keys = "g" },
			{ mode = "n", keys = "'" },
			{ mode = "n", keys = "`" },
			{ mode = "x", keys = "'" },
			{ mode = "x", keys = "`" },
			{ mode = "n", keys = '"' },
			{ mode = "x", keys = '"' },
			{ mode = "i", keys = "<C-r>" },
			{ mode = "c", keys = "<C-r>" },
			{ mode = "n", keys = "<C-w>" },
			{ mode = "n", keys = "z" },
			{ mode = "x", keys = "z" },
		},
		clues = {
			require("mini.clue").gen_clues.builtin_completion(),
			require("mini.clue").gen_clues.g(),
			require("mini.clue").gen_clues.marks(),
			require("mini.clue").gen_clues.registers(),
			require("mini.clue").gen_clues.windows(),
			require("mini.clue").gen_clues.z(),
		},
	})
	-- require("mini.colors").setup()
	require("mini.comment").setup()
	require("mini.completion").setup({
		window = {
			info = { border = "rounded" },
			signature = { border = "rounded" },
		},
	})
	require("mini.cursorword").setup()
	-- require("mini.doc").setup()
	require("mini.extra").setup()
	require("mini.files").setup()
	require("mini.fuzzy").setup()
	require("mini.hipatterns").setup({
		highlighters = {
			fixme = { pattern = "%f[%w]()FIXME()%f[%W]", group = "MiniHipatternsFixme" },
			hack = { pattern = "%f[%w]()HACK()%f[%W]", group = "MiniHipatternsHack" },
			todo = { pattern = "%f[%w]()TODO()%f[%W]", group = "MiniHipatternsTodo" },
			note = { pattern = "%f[%w]()NOTE()%f[%W]", group = "MiniHipatternsNote" },
			hex_color = require("mini.hipatterns").gen_highlighter.hex_color(),
		},
	})
	-- require("mini.hues").setup()
	require("mini.indentscope").setup()
	require("mini.jump").setup()
	require("mini.jump2d").setup()
	-- require("mini.map").setup()
	require("mini.misc").setup()
	require("mini.move").setup()
	require("mini.notify").setup({
		window = {
			max_width_share = 0.5,
		},
	})
	require("mini.operators").setup()
	require("mini.pairs").setup({
		mappings = {
			["<"] = { action = "open", pair = "<>", neigh_pattern = "[^\\]." },
			[">"] = { action = "close", pair = "<>", neigh_pattern = "[^\\]." },
		},
	})
	require("mini.pick").setup()
	require("mini.sessions").setup()
	require("mini.splitjoin").setup()
	require("mini.starter").setup({
		header = table.concat({
			"██████╗░██████╗░░░███╗░░████████╗██████╗░░█████╗░███╗░░██╗",
			"╚════██╗╚════██╗░████║░░╚══██╔══╝██╔══██╗██╔══██╗████╗░██║",
			"░░███╔═╝░█████╔╝██╔██║░░░░░██║░░░██████╔╝██║░░██║██╔██╗██║",
			"██╔══╝░░░╚═══██╗╚═╝██║░░░░░██║░░░██╔══██╗██║░░██║██║╚████║",
			"███████╗██████╔╝███████╗░░░██║░░░██║░░██║╚█████╔╝██║░╚███║",
			"╚══════╝╚═════╝░╚══════╝░░░╚═╝░░░╚═╝░░╚═╝░╚════╝░╚═╝░░╚══╝",
		}, "\n"),
		query_updaters = "abcdefghijklmnopqrstuvwxyz0123456789_-.+",
		items = {
			require("mini.starter").sections.builtin_actions(),
			require("mini.starter").sections.recent_files(5, false),
			require("mini.starter").sections.recent_files(5, true),
			require("mini.starter").sections.sessions(5, true),
		},
		footer = table.concat({
			"███╗░░██╗███████╗░█████╗░██╗░░░██╗██╗███╗░░░███╗",
			"████╗░██║██╔════╝██╔══██╗██║░░░██║██║████╗░████║",
			"██╔██╗██║█████╗░░██║░░██║╚██╗░██╔╝██║██╔████╔██║",
			"██║╚████║██╔══╝░░██║░░██║░╚████╔╝░██║██║╚██╔╝██║",
			"██║░╚███║███████╗╚█████╔╝░░╚██╔╝░░██║██║░╚═╝░██║",
			"╚═╝░░╚══╝╚══════╝░╚════╝░░░░╚═╝░░░╚═╝╚═╝░░░░░╚═╝",
		}, "\n"),
	})
	require("mini.statusline").setup({
		content = {
			active = function()
				local mode, mode_hl = MiniStatusline.section_mode({ trunc_width = 120 })
				local git = MiniStatusline.section_git({ trunc_width = 75 })
				local diagnostics = MiniStatusline.section_diagnostics({ trunc_width = 75 })
				local filename = MiniStatusline.section_filename({ trunc_width = 140 })
				if filename:sub(1, 2) == "%F" or filename:sub(1, 2) == "%f" then
					filename = filename:sub(1, 2) .. " " .. filename:sub(3, -1)
				end
				local fileinfo = MiniStatusline.section_fileinfo({ trunc_width = 1000 })
				local location = MiniStatusline.section_location({ trunc_width = 75 })
				-- local search = MiniStatusline.section_searchcount({ trunc_width = 75 })
				return MiniStatusline.combine_groups({
					{ hl = mode_hl, strings = { mode } },
					{ hl = "MiniStatuslineDevinfo", strings = { git, diagnostics } },
					"%<",
					{ hl = "MiniStatuslineFilename", strings = { filename } },
					"%=",
					{ hl = "MiniStatuslineFileinfo", strings = { fileinfo } },
					-- { hl = mode_hl, strings = { search, location } },
					{ hl = mode_hl, strings = { location } },
				})
			end,
			inactive = function()
				local git = MiniStatusline.section_git({ trunc_width = 75 })
				local diagnostics = MiniStatusline.section_diagnostics({ trunc_width = 75 })
				local filename = MiniStatusline.section_filename({ trunc_width = 140 })
				if filename:sub(1, 2) == "%F" or filename:sub(1, 2) == "%f" then
					filename = filename:sub(1, 2) .. " " .. filename:sub(3, -1)
				end
				local fileinfo = MiniStatusline.section_fileinfo({ trunc_width = 1000 })
				return MiniStatusline.combine_groups({
					{ hl = "MiniStatuslineDevinfo", strings = { git, diagnostics } },
					"%<",
					{ hl = "MiniStatuslineFilename", strings = { filename } },
					"%=",
					{ hl = "MiniStatuslineFileinfo", strings = { fileinfo } },
				})
			end,
		},
	})
	require("mini.surround").setup()
	require("mini.tabline").setup()
	-- require("mini.test").setup()
	require("mini.trailspace").setup()
	require("mini.visits").setup()

	vim.notify = MiniNotify.make_notify()
end)

-- Dependencies
now(function()
	add("kevinhwang91/promise-async")
	add("nvim-tree/nvim-web-devicons")
	add("lukas-reineke/indent-blankline.nvim")
	add("luukvbaal/statuscol.nvim")
	add({ source = "nvim-pack/nvim-spectre", depends = { "nvim-lua/plenary.nvim" } })
	add("neovim/nvim-lspconfig")
	add({
		source = "nvim-treesitter/nvim-treesitter",
		hooks = {
			post_checkout = function()
				vim.cmd("TSUpdate")
			end,
		},
	})
	add({
		source = "kevinhwang91/nvim-ufo",
		depends = { "neovim/nvim-lspconfig", "kevinhwang91/promise-async", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "stevearc/aerial.nvim",
		depends = { "neovim/nvim-lspconfig", "nvim-tree/nvim-web-devicons", "nvim-treesitter/nvim-treesitter" },
	})
	add("mfussenegger/nvim-dap")
	add({
		source = "L3MON4D3/LuaSnip",
		depends = { "rafamadriz/friendly-snippets" },
	})
	add({
		source = "mfussenegger/nvim-jdtls",
		depends = { "mfussenegger/nvim-dap" },
	})
	add({
		source = "danymat/neogen",
		depends = { "nvim-treesitter/nvim-treesitter" },
	})
	add({ source = "RRethy/nvim-treesitter-endwise", depends = { "nvim-treesitter/nvim-treesitter" } })
	add({ source = "jbyuki/one-small-step-for-vimkind", depends = { "mfussenegger/nvim-dap" } })
	add({
		source = "microsoft/vscode-js-debug",
		hooks = {
			post_checkout = function()
				-- local path = vim.fn.stdpath("data") .. "/site/pack/paqs/start/vscode-js-debug"
				-- vim.fn.system({
				-- "bash",
				-- "-c",
				-- "cd "
				--	.. path
				--	.. " && rm -rf dist out && npm install && npx gulp vsDebugServerBundle && mv dist out",
				--})
			end,
		},
	})
	add({ source = "leoluz/nvim-dap-go", depends = { "mfussenegger/nvim-dap" } })
	add({
		source = "mfussenegger/nvim-dap-python",
		depends = { "mfussenegger/nvim-dap", "nvim-treesitter/nvim-treesitter" },
	})
	add({ source = "mxsdev/nvim-dap-vscode-js", depends = { "microsoft/vscode-js-debug", "mfussenegger/nvim-dap" } })
	add("stevearc/conform.nvim")
	add("mfussenegger/nvim-lint")
	add({
		source = "nvim-neotest/neotest",
		depends = { "antoinemadec/FixCursorHold.nvim", "nvim-lua/plenary.nvim", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "nvim-neotest/neotest-python",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "nvim-neotest/neotest-go",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "nvim-neotest/neotest-jest",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "marilari88/neotest-vitest",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "thenbe/neotest-playwright",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "rouge8/neotest-rust",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "MarkEmmons/neotest-deno",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "lawrence-laz/neotest-zig",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "alfaix/neotest-gtest",
		depends = { "nvim-neotest/neotest", "nvim-lua/plenary.nvim", "nvim-treesitter/nvim-treesitter" },
	})
	add({
		source = "rcasia/neotest-bash",
		depends = { "nvim-neotest/neotest", "nvim-treesitter/nvim-treesitter" },
	})
	add("tpope/vim-fugitive")
	add({ source = "rest-nvim/rest.nvim", depends = { "nvim-lua/plenary.nvim" } })
	add("David-Kunz/gen.nvim")
	add("stevearc/overseer.nvim")
	add({
		source = "folke/trouble.nvim",
		depends = { "nvim-tree/nvim-web-devicons" },
	})
	add("stevearc/qf_helper.nvim")
end)

-- Utility libraries
now(function()
	require("nvim-web-devicons").setup()
	require("ibl").setup({
		scope = {
			show_start = false,
			show_end = false,
		},
	})
	require("statuscol").setup({
		relculright = true,
		segments = {
			{ text = { require("statuscol.builtin").foldfunc }, click = "v:lua.ScFa" },
			{ text = { "%s" }, click = "v:lua.ScSa" },
			{ text = { require("statuscol.builtin").lnumfunc, " " }, click = "v:lua.ScLa" },
		},
	})
end)

-- Treesitter setup
now(function()
	require("nvim-treesitter.configs").setup({
		modules = {},
		indent = true,
		ensure_installed = {
			"angular",
			"awk",
			"bash",
			"c",
			"cmake",
			"cpp",
			"css",
			"csv",
			"diff",
			"dockerfile",
			"doxygen",
			"fish",
			"git_config",
			"git_rebase",
			"gitcommit",
			"gitignore",
			"go",
			"gomod",
			"gosum",
			"gowork",
			"graphql",
			"html",
			"http",
			"ini",
			"java",
			"javascript",
			"jq",
			"jsdoc",
			"json",
			"lua",
			"luadoc",
			"make",
			"markdown",
			"markdown_inline",
			"meson",
			"ninja",
			"nix",
			"perl",
			"php",
			"pug",
			"python",
			"ruby",
			"rust",
			"scala",
			"scss",
			"sql",
			"ssh_config",
			"starlark",
			"svelte",
			"toml",
			"typescript",
			"vim",
			"vimdoc",
			"vue",
			"xml",
			"yaml",
			"yuck",
			"zig",
		},
		sync_install = false,
		auto_install = true,
		ignore_install = {},
		highlight = {
			enable = true,
			disable = function(lang, buf)
				local max_filesize = 2 * 1024 * 1024
				local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
				if ok and stats and stats.size > max_filesize then
					if lang == "asm" or lang == "wasm" then
						return false
					end
					return true
				end
			end,
			additional_vim_regex_highlighting = true,
		},
		endwise = {
			enable = true,
		},
	})
end)

-- Lsp setup
now(function()
	require("luasnip.loaders.from_vscode").lazy_load()

	-- local luasnip = require("luasnip")
	-- Luasnip_go_right = function()
	--      if luasnip.expand_or_jumpable() then
	--              luasnip.expand_or_jump()
	--      end
	-- end
	--
	-- Luasnip_go_left = function()
	--      if luasnip.jumpable() then
	--              luasnip.jump(-1)
	--      end
	-- end
	--
	-- vim.api.nvim_set_keymap("i", "<C-l>r", [[<Cmd>lua Luasnip_go_right()<CR>]], {})
	-- vim.api.nvim_set_keymap("s", "<C-l>r", [[<Cmd>lua Luasnip_go_right()<CR>]], {})
	--
	-- vim.api.nvim_set_keymap("i", "<C-h>l", [[<Cmd>lua Luasnip_go_left()<CR>]], {})
	-- vim.api.nvim_set_keymap("s", "<C-h>l", [[<Cmd>lua Luasnip_go_left()<CR>]], {})

	local capabilities = vim.lsp.protocol.make_client_capabilities()
	capabilities.textDocument.foldingRange = {
		dynamicRegistration = false,
		lineFoldingOnly = true,
	}
	local lspconfig = require("lspconfig")
	require("lspconfig").lua_ls.setup({
		on_init = function(client)
			local path = client.workspace_folders[1].name
			if vim.loop.fs_stat(path .. "/.luarc.json") or vim.loop.fs_stat(path .. "/.luarc.jsonc") then
				return
			end
			client.config.settings.Lua = vim.tbl_deep_extend("force", client.config.settings.Lua, {
				runtime = {
					version = "LuaJIT",
				},
				workspace = {
					checkThirdParty = false,
					-- library = {
					-- 	vim.env.VIMRUNTIME,
					-- 	"${3rd}/luv/library",
					-- 	"${3rd}/busted/library",
					-- },
					library = vim.api.nvim_get_runtime_file("", true),
				},
			})
		end,
		settings = {
			Lua = {},
		},
	})
	lspconfig.html.setup({
		capabilities = capabilities,
	})
	lspconfig.cssls.setup({
		capabilities = capabilities,
	})
	lspconfig.bashls.setup({
		capabilities = capabilities,
	})
	lspconfig.gopls.setup({
		capabilities = capabilities,
	})
	lspconfig.pyright.setup({
		capabilities = capabilities,
	})
	lspconfig.rust_analyzer.setup({
		capabilities = capabilities,
	})
	lspconfig.tsserver.setup({
		capabilities = capabilities,
	})
	lspconfig.svelte.setup({
		capabilities = capabilities,
	})
	lspconfig.clangd.setup({
		capabilities = capabilities,
	})
	lspconfig.yamlls.setup({
		capabilities = capabilities,
	})
	lspconfig.jsonls.setup({
		capabilities = capabilities,
	})
	lspconfig.lemminx.setup({
		capabilities = capabilities,
	})
	lspconfig.angularls.setup({
		capabilities = capabilities,
	})
	local ftMap = {
		python = { "indent" },
	}
	local function customizeSelector(bufnr)
		local function handleFallbackException(err, providerName)
			if type(err) == "string" and err:match("UfoFallbackException") then
				return require("ufo").getFolds(bufnr, providerName)
			else
				return require("promise").reject(err)
			end
		end
		return require("ufo")
			.getFolds(bufnr, "lsp")
			:catch(function(err)
				return handleFallbackException(err, "treesitter")
			end)
			:catch(function(err)
				return handleFallbackException(err, "indent")
			end)
	end
	require("ufo").setup({
		open_fold_hl_timeout = 150,
		enable_get_fold_virt_text = false,
		preview = {
			win_config = {
				border = { "", "─", "", "", "", "─", "", "" },
				winhighlight = "Normal:Folded",
				winblend = 0,
			},
			mappings = {
				scrollU = "<C-u>",
				scrollD = "<C-d>",
				jumpTop = "[",
				jumpBot = "]",
			},
		},
		close_fold_kinds = { "imports", "comment" },
		provider_selector = function(bufnr, filetype, buftype)
			return ftMap[filetype] or customizeSelector
		end,
	})
	require("aerial").setup({
		backends = { "lsp", "treesitter", "markdown", "man" },
		show_guides = true,
		layout = {
			filter_kind = false,
		},
	})
	require("neogen").setup({ snippet_engine = "luasnip" })
end)

-- Dap setup
now(function() end)

-- Formatting and linting setup
now(function()
	require("lint").linters_by_ft = {
		json = { "jsonlint" },
		jsonc = { "jsonlint" },
		yaml = { "yamllint" },
		java = { "checkstyle" },
		go = { "golangcilint" },
		-- lua = { "luacheck" },
		python = { "pylint" },
		c = { "clangtidy" },
		javascript = { "eslint" },
		typescript = { "eslint" },
		svelte = { "eslint" },
		sh = { "shellcheck" },
	}
	require("conform").setup({
		formatters_by_ft = {
			lua = { "stylua" },
			python = { "black" },
			svelte = { "prettier" },
			java = { "google-java-format" },
			go = { "gofumpt" },
			tex = { "latexindent" },
			xml = { "xmllint" },
			yaml = { "yamlfix" },
			json = { "jq", "prettier" },
			jsonc = { "prettier" },
			css = { "prettier" },
			html = { "prettier" },
			c = { "clang_format" },
			sh = { "shfmt" },
			rust = { "rustfmt" },
			javascript = { "prettier" },
			typescript = { "prettier" },
		},
		lsp_fallback = true,
	})
end)

-- Testing setup
now(function() end)

-- Git setup
now(function() end)

-- Api setup
now(function() end)

-- Ai setup
now(function()
	require("gen").setup({
		model = "dolphin-mistral",
		host = "localhost",
		port = "11434",
		display_mode = "float",
		show_prompt = true,
		show_model = true,
		no_auto_close = false,
		-- init = function(options)
		-- 	pcall(io.popen, "ollama serve > /dev/null 2>&1 &")
		-- end,
		command = function(options)
			return "curl --silent --no-buffer -X POST http://"
				.. options.host
				.. ":"
				.. options.port
				.. "/api/chat -d $body"
		end,
		debug = false,
	})
end)

-- Task runner setup
now(function() end)

-- Keymap configuration
now(function()
	local te_buf = nil
	local te_win_id = nil

	local keys = {
		["cr"] = vim.api.nvim_replace_termcodes("<CR>", true, true, true),
		["ctrl-y"] = vim.api.nvim_replace_termcodes("<C-y>", true, true, true),
		["ctrl-y_cr"] = vim.api.nvim_replace_termcodes("<C-y><CR>", true, true, true),
	}
	_G.cr_action = function()
		if vim.fn.pumvisible() ~= 0 then
			local item_selected = vim.fn.complete_info()["selected"] ~= -1
			return item_selected and keys["ctrl-y"] or keys["ctrl-y_cr"]
		else
			-- return keys["cr"]
			return require("mini.pairs").cr()
		end
	end
	local function tmap(suffix, rhs, desc, opts)
		opts = opts or {}
		opts.desc = desc
		vim.keymap.set("t", suffix, rhs, opts)
	end
	local function nmap(suffix, rhs, desc, opts)
		opts = opts or {}
		opts.desc = desc
		vim.keymap.set("n", suffix, rhs, opts)
	end
	local function vmap(suffix, rhs, desc, opts)
		opts = opts or {}
		opts.desc = desc
		vim.keymap.set("v", suffix, rhs, opts)
	end
	local function imap(suffix, rhs, desc, opts)
		opts = opts or {}
		opts.desc = desc
		vim.keymap.set("i", suffix, rhs, opts)
	end
	local function nvmap(suffix, rhs, desc, opts)
		opts = opts or {}
		opts.desc = desc
		vim.keymap.set({ "n", "v" }, suffix, rhs, opts)
	end
	local function openTerminal()
		if vim.fn.bufexists(te_buf) ~= 1 then
			vim.api.nvim_command("au TermOpen * setlocal nonumber norelativenumber signcolumn=no")
			vim.api.nvim_command("sp | winc J | res 10 | te")
			te_win_id = vim.fn.win_getid()
			te_buf = vim.fn.bufnr("%")
		elseif vim.fn.win_gotoid(te_win_id) ~= 1 then
			vim.api.nvim_command("sb " .. te_buf .. "| winc J | res 10")
			te_win_id = vim.fn.win_getid()
		end
		vim.api.nvim_command("startinsert")
	end
	local function hideTerminal()
		if vim.fn.win_gotoid(te_win_id) == 1 then
			vim.api.nvim_command("hide")
		end
	end
	local function toggleTerminal()
		if vim.fn.win_gotoid(te_win_id) == 1 then
			hideTerminal()
		else
			openTerminal()
		end
	end

	imap("<CR>", "v:lua._G.cr_action()", "Mini.pairs cr mapping", { expr = true })
	imap("<S-Tab>", [[pumvisible() ? "\<C-p>" : "\<S-Tab>"]], "Anticlockwise completions", { expr = true })
	imap("<Tab>", [[pumvisible() ? "\<C-n>" : "\<Tab>"]], "Clockwise completions", { expr = true })
	nmap("<leader>am", require("gen").select_model, "Select model")
	nmap("<leader>cn", "<cmd>AerialNext<cr>", "Code outline next")
	nmap("<leader>cp", "<cmd>AerialPrev<cr>", "Code outline prev")
	nmap("<leader>ct", "<cmd>AerialToggle<cr>", "Code outline toggle")
	nmap("<leader>db", "<cmd>lua require('dap').set_breakpoint()<cr>", "Set breakpoint")
	nmap("<leader>dc", "<cmd>lua require('dap').continue()<cr>", "Continue")
	nmap("<leader>df", ":lua require('dap.ui.widgets').centered_float(require('dap.ui.widgets').frames)<cr>", "Frames")
	nmap("<leader>dl", "<cmd>lua require('dap').run_last()<cr>", "Run Last")
	nmap("<leader>dlp", "<cmd>lua require('dap').set_breakpoint(nil, nil, vim.fn.input('Log: '))<cr>", "Set log point")
	nmap("<leader>dr", "<cmd>lua require('dap').repl.open()<cr>", "Open Repl")
	nmap("<leader>ds", ":lua require('dap.ui.widgets').centered_float(require('dap.ui.widgets'.scopes)<cr>", "Scopes")
	nmap("<leader>dsi", "<cmd>lua require('dap').step_into()<cr>", "Step into")
	nmap("<leader>dso", "<cmd>lua require('dap').step_out()<cr>", "Step out")
	nmap("<leader>dso", "<cmd>lua require('dap').step_over()<cr>", "Step over")
	nmap("<leader>dt", "<cmd>lua require('dap').toggle_breakpoint()<cr>", "Toggle breakpoint")
	nmap("<leader>fr", "<cmd>lua require('spectre').toggle()<cr>", "Search and replace")
	nmap("<leader>gc", "<cmd>lua require('neogen').generate({ type = 'class' })<cr>", "Generate class annotations")
	nmap("<leader>gf", "<cmd>lua require('neogen').generate({ type = 'file' })<cr>", "Generate file annotations")
	nmap("<leader>gf", "<cmd>lua require('neogen').generate({ type = 'func' })<cr>", "Generate function annotations")
	nmap("<leader>gg", "<cmd>lua require('neogen').generate()<cr>", "Generate annotations")
	nmap("<leader>gt", "<cmd>lua require('neogen').generate({ type = 'type' })<cr>", "Generate type annotations")
	nmap("<leader>lc", "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code action")
	nmap("<leader>ldh", "<cmd>lua vim.diagnostic.hide()<cr>", "Hide diagnostics")
	nmap("<leader>ldn", "<cmd>lua vim.diagnostic.goto_next()<cr>", "Goto next diagnostic")
	nmap("<leader>ldp", "<cmd>lua vim.diagnostic.goto_prev()<cr>", "Goto prev diagnostic")
	nmap("<leader>lds", "<cmd>lua vim.diagnostic.show()<cr>", "Show diagnostics")
	nmap("<leader>ldt", "<cmd>lua vim.diagnostic.open_float()<cr>", "Open diagnostic float")
	nmap("<leader>lf", "<cmd>lua vim.lsp.buf.format({async = true})<cr>", "Format")
	nmap("<leader>lgD", "<cmd>lua vim.lsp.buf.declaration()<cr>", "Goto declaration")
	nmap("<leader>lgb", "<C-t>", "Previous tag")
	nmap("<leader>lgd", "<cmd>lua vim.lsp.buf.definition()<cr>", "Goto definition")
	nmap("<leader>lgi", "<cmd>lua vim.lsp.buf.implementation()<cr>", "Goto implementation")
	nmap("<leader>lgr", "<cmd>lua vim.lsp.buf.references()<cr>", "Goto references")
	nmap("<leader>lgs", "<cmd>lua vim.lsp.buf.signature_help()<cr>", "Signature help")
	nmap("<leader>lgtd", "<cmd>lua vim.lsp.buf.type_definition()<cr>", "Goto type definition")
	nmap("<leader>lh", "<cmd>lua vim.lsp.buf.hover()<cr>", "Hover symbol")
	nmap("<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename")
	nmap("zM", require("ufo").closeAllFolds, "Close all folds")
	nmap("zR", require("ufo").openAllFolds, "Open all folds")
	nmap("zk", require("ufo").peekFoldedLinesUnderCursor, "Preview folded lines")
	nmap("zm", require("ufo").closeFoldsWith, "Close folds with")
	nmap("zr", require("ufo").openFoldsExceptKinds, "Open all folds except kinds")
	nvmap("<F2>", "<cmd>Format<cr>", "Format code")
	nvmap("<leader>ap", ":Gen<cr>", "Prompt Model")
	nvmap("<leader>dh", "<cmd>lua require('dap.ui.widgets').hover()<cr>", "Hover value")
	nvmap("<leader>dp", "<cmd>lua require('dap.ui.widgets').preview()<cr>", "Preview")
	tmap("<Esc>", "<C-\\><C-n>", "Escape terminal mode")
	vmap("<C-c>", '"+y', "Copy to clipboard")
	vmap("<C-c><C-c>", '"+x', "Cut to clipboard")
end)

-- Commands configuration
now(function()
	vim.api.nvim_create_user_command("Format", function(args)
		local range = nil
		if args.count ~= -1 then
			local end_line = vim.api.nvim_buf_get_lines(0, args.line2 - 1, args.line2, true)[1]
			range = {
				start = { args.line1, 0 },
				["end"] = { args.line2, end_line:len() },
			}
		end
		require("conform").format({ async = true, range = range })
	end, { range = true })
end)

-- Autocommand configuration
now(function()
	vim.api.nvim_create_autocmd("BufReadPost", {
		callback = function()
			vim.cmd("norm zx")
			vim.cmd("norm zR")
		end,
	})
	vim.api.nvim_create_autocmd("FileType", {
		pattern = "svelte,jsx,html,xml,xsl,javascriptreact",
		callback = function()
			vim.bo.omnifunc = "htmlcomplete#CompleteTags"
		end,
	})
	vim.api.nvim_create_autocmd({ "BufWritePost" }, {
		callback = function()
			require("lint").try_lint()
		end,
	})
	vim.api.nvim_create_autocmd("BufWritePre", {
		pattern = "*",
		callback = function(args)
			require("conform").format({ bufnr = args.buf })
		end,
	})
	vim.api.nvim_create_autocmd("BufWritePre", {
		pattern = "*",
		callback = function()
			MiniTrailspace.trim()
			MiniTrailspace.trim_last_lines()
		end,
	})
	vim.api.nvim_create_autocmd("FileType", {
		pattern = { "java" },
		callback = function()
			local config = {
				cmd = { "/usr/bin/jdtls" },
				root_dir = require("jdtls.setup").find_root({ ".git", "mvnw", "gradlew" }),
				settings = {
					java = {
						references = {
							includeDecompiledSources = true,
						},
						eclipse = {
							downloadSources = true,
						},
						maven = {
							downloadSources = true,
						},
						format = {
							enabled = false,
							-- settings = {
							--      url = vim.fn.stdpath("config") .. "/lang_servers/intellij-java-google-style.xml",
							--      profile = "GoogleStyle",
							-- },
						},
						signatureHelp = { enabled = true },
						contentProvider = { preferred = "fernflower" },
						codeGeneration = {
							toString = {
								template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}",
							},
							useBlocks = true,
						},
						configuration = {
							runtimes = {
								{
									name = "JavaSE-11",
									path = "/usr/lib/jvm/java-1.11.0-openjdk-amd64/",
								},
								{
									name = "JavaSE-17",
									path = "/usr/lib/jvm/java-1.17.0-openjdk-amd64/",
								},
							},
						},
					},
				},
			}
			local bundles = {
				vim.fn.glob("/usr/share/java-debug/com.microsoft.java.debug.plugin.jar", true),
			}
			vim.list_extend(bundles, vim.split(vim.fn.glob("/usr/share/java-test/*.jar", true), "\n"))
			local extendedClientCapabilities = require("jdtls").extendedClientCapabilities
			extendedClientCapabilities.resolveAdditionalTextEditsSupport = true
			config["init_options"] = {
				bundles = bundles,
				extendedClientCapabilities = extendedClientCapabilities,
			}
			require("jdtls").start_or_attach(config)
		end,
	})
	vim.api.nvim_create_autocmd("LspAttach", {
		desc = "LSP actions",
		callback = function(event)
			-- local opts = { buffer = event.buf }
			-- local bufnr = event.buf
			-- local client = vim.lsp.get_client_by_id(event.data.client_id)
			vim.diagnostic.config({
				virtual_text = true,
			})
			if vim.bo.filetype == "java" then
				require("jdtls.dap").setup_dap_main_class_configs()
			end
		end,
	})
end)
